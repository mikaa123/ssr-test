{"version":3,"sources":["../../server/index.js"],"names":["app","port","client","index","initIndex","use","static","handleRender","renderFullPage","html","preloadedState","req","res","counter","store","search","then","state","console","log","finalState","getState","send","listen"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;AACA,IAAMC,OAAO,IAAb;;AAEA,IAAIC,SAAS,6BAAc,SAAd,EAAyB,kCAAzB,CAAb;AACA,IAAIC,QAAQD,OAAOE,SAAP,CAAiB,SAAjB,CAAZ;;AAEAJ,IAAIK,GAAJ,CAAQ,SAAR,EAAmB,kBAAQC,MAAR,CAAe,QAAf,CAAnB;;AAEA;AACAN,IAAIK,GAAJ,CAAQE,YAAR;;AAEA;AACA,SAASC,cAAT,CAAwBC,IAAxB,EAA8BC,cAA9B,EAA8C,CAAE,SAAW;;AAE3D,SAASH,YAAT,CAAsBI,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,MAAMF,iBAAiB,EAAEG,SAAS,EAAX,EAAvB;AACA,MAAMC,QAAQ,4CAEZJ,cAFY,CAAd;;AAKAP,QAAMY,MAAN,CAAa,EAAb,EAAiBC,IAAjB,CAAsB,UAACC,KAAD,EAAW;AAC/BC,YAAQC,GAAR,CAAY,WAAZ,EAAyBF,KAAzB;AACA;AACA,QAAMR,OAAO,kCACX;AAAA;AAAA,QAAU,OAAOK,KAAjB;AACE,wDAAQ,cAAcG,KAAtB;AADF,KADW,CAAb;;AAMA;AACA,QAAMG,aAAaN,MAAMO,QAAN,EAAnB;AACAH,YAAQC,GAAR,CAAY,QAAZ,EAAsBC,UAAtB;;AAEA;AACAR,QAAIU,IAAJ,CAASd,eAAeC,IAAf,EAAqBW,UAArB,CAAT;AACD,GAfD;AAiBD;;AAED,SAASZ,cAAT,CAAwBC,IAAxB,EAA8BC,cAA9B,EAA8C;AAC5C,mKAOuBD,IAPvB;AAiBD;;AAEDT,IAAIuB,MAAJ,CAAWtB,IAAX","file":"index.js","sourcesContent":["import path from 'path'\nimport express from 'express'\nimport React from 'react'\nimport { createStore } from 'redux'\nimport { Provider } from 'react-redux'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport counterApp from './../common/reducers'\nimport Search from './../common/components/Search'\nimport algoliasearch from 'algoliasearch'\n\nconst app = express()\nconst port = 3000\n\nvar client = algoliasearch('latency', '3d9875e51fbd20c7754e65422f7ce5e1');\nvar index = client.initIndex('bestbuy');\n\napp.use('/public', express.static('public'))\n\n// This is fired every time the server side receives a request\napp.use(handleRender)\n\n// We are going to fill these out in the sections to follow\nfunction renderFullPage(html, preloadedState) { /* ... */ }\n\nfunction handleRender(req, res) {\n  const preloadedState = { counter: 10 }\n  const store = createStore(\n    counterApp,\n    preloadedState\n  )\n\n  index.search('').then((state) => {\n    console.log('in search', state);\n    // Render the component to a string\n    const html = renderToStaticMarkup(\n      <Provider store={store}>\n        <Search resultsState={state} />\n      </Provider>\n    )\n\n    // Grab the initial state from our Redux store\n    const finalState = store.getState()\n    console.log('state:', finalState);\n\n    // Send the rendered page back to the client\n    res.send(renderFullPage(html, finalState))\n  })\n\n}\n\nfunction renderFullPage(html, preloadedState) {\n  return `\n    <!doctype html>\n    <html>\n      <head>\n        <title>Redux Universal Example</title>\n      </head>\n      <body>\n        <div id=\"root\">${html}</div>\n        <script>\n          // WARNING: See the following for Security isues with this approach:\n          // http://redux.js.org/docs/recipes/ServerRendering.html#security-considerations\n        </script>\n        <script src=\"/public/vendor.bundle.js\"></script>\n        <script src=\"/public/bundle.js\"></script>\n      </body>\n    </html>\n    `\n}\n\napp.listen(port)\n"]}